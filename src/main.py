# Importaciones de librer√≠as y m√≥dulos
import time  # M√≥dulo est√°ndar para medir el tiempo de ejecuci√≥n.
import os  # M√≥dulo para interactuar con el sistema operativo (manejo de archivos y rutas).
import sys  # M√≥dulo que proporciona acceso a par√°metros del sistema, como `sys.stdout`.
from graph_utils import leer_casos  # Importa la funci√≥n para cargar datos de grafos.
from coloring import busqueda_local, contar_conflictos  # Algoritmo de coloraci√≥n y funci√≥n para contar conflictos.
from visualization import crear_animacion  # Funci√≥n para generar animaciones (GIFs).

# --- Clase Logger para capturar la salida en archivo y consola ---
class Logger:
    """
    Clase que redirige la salida est√°ndar (sys.stdout) a la consola y a un archivo de texto.
    Esto permite registrar todo lo que se imprime sin la necesidad de llamar a una funci√≥n
    de guardado expl√≠citamente.
    """
    def __init__(self, filename):
        """
        Inicializa el Logger, guardando la referencia a la salida original y abriendo el archivo.
        
        Args:
            filename (str): La ruta del archivo donde se guardar√° la salida.
        """
        self.terminal = sys.stdout  # Guarda la referencia a la salida est√°ndar original.
        self.log = open(filename, "w", encoding="utf-8") # Abre el archivo en modo de escritura.

    def write(self, message):
        """
        M√©todo que se llama autom√°ticamente cuando se usa `print`.
        Redirige el mensaje a la consola y al archivo.
        """
        self.terminal.write(message)
        self.log.write(message)

    def flush(self):
        """
        M√©todo necesario para vaciar los buffers de escritura.
        Garantiza que el contenido se escriba en el archivo de forma inmediata.
        """
        self.terminal.flush()
        self.log.flush()

# --- Funci√≥n para imprimir soluci√≥n ---
def guardar_solucion(idx, colores, conflictos, tiempo, k, iteraciones):
    """
    Imprime los detalles de la soluci√≥n final. La salida se registra
    autom√°ticamente en el archivo de soluciones gracias al Logger.
    """
    print(f"\nüü¢ Caso {idx}")
    print(f"  - Colores usados: {len(set(colores.values()))} (k = {k})")
    print(f"  - Conflictos: {conflictos}")
    print(f"  - Iteraciones: {iteraciones}")
    print(f"  - Tiempo: {tiempo:.4f} segundos")
    for nodo in sorted(colores.keys()):
        print(f"    Nodo {nodo}: Color {colores[nodo]}")

# --- Funci√≥n principal ---
def main():
    """
    Funci√≥n principal que coordina la carga de datos, la ejecuci√≥n del algoritmo
    de coloraci√≥n de grafos y la visualizaci√≥n de los resultados.
    """
    # Obtiene la ruta del directorio del script para construir rutas relativas.
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Construye las rutas a los archivos y directorios de entrada y salida.
    ruta = os.path.join(script_dir, "..", "data", "casos_coloracion_grafos.txt")
    results_dir = os.path.join(script_dir, "..", "results")
    os.makedirs(results_dir, exist_ok=True)
    soluciones_path = os.path.join(results_dir, "soluciones.txt")

    # Redirige la salida est√°ndar a una instancia de la clase Logger.
    sys.stdout = Logger(soluciones_path)

    casos = leer_casos(ruta)

    # Bucle principal para procesar cada caso de grafo.
    for idx, G in enumerate(casos, 1):
        print(f"\nüü¢ Resolviendo Caso {idx}...")

        # Informaci√≥n del grafo para la estrategia de coloraci√≥n.
        grados = dict(G.degree())
        print(f"üìä Grados de los nodos: {grados}")
        grado_max = max(grados.values())
        print(f"üìà Grado m√°ximo: {grado_max}")

        # Se establece el valor inicial de `k` (n√∫mero de colores) bas√°ndose en el Teorema de Brooks.
        k = grado_max + 1
        print(f"üéØ k inicial calculado: {k}")

        mejor_solucion = None
        pasos_totales = []  # Lista para almacenar todos los pasos de la animaci√≥n.

        # Bucle para encontrar la coloraci√≥n √≥ptima (m√≠nimo de colores).
        while k > 0:
            inicio = time.time()
            # `busqueda_local` devuelve una lista de pasos: `(colores, conflictos)`.
            colores, pasos, iteraciones = busqueda_local(G, k, max_iter=1000)
            tiempo = time.time() - inicio
            conflictos = contar_conflictos(G, colores)

            print(f"\nüîé Intento con k = {k}")
            print(f"  - Conflictos: {conflictos}")
            print(f"  - Colores usados: {len(set(colores.values()))}")
            print(f"  - Iteraciones: {iteraciones}")
            print(f"  - Tiempo: {tiempo:.4f} segundos")
            for nodo in sorted(G.nodes()):
                print(f"    Nodo {nodo}: Color {colores[nodo]}")

            # Acumula los pasos de cada ejecuci√≥n de `busqueda_local` en una lista global.
            for i, (col, conf) in enumerate(pasos):
                descripcion = f"Iteraci√≥n {i} con k={k} - Conflictos: {conf}"
                # Almacena el estado completo para la animaci√≥n.
                # Es crucial usar `.copy()` para evitar que los cambios posteriores afecten a los pasos ya guardados.
                pasos_totales.append((col.copy(), conf, k, descripcion))

            if conflictos == 0:
                # Si se encuentra una soluci√≥n sin conflictos, se guarda como la mejor.
                # Se usa `colores.copy()` para asegurar que se almacena una copia inmutable.
                mejor_solucion = (colores.copy(), tiempo, k, iteraciones)
                k -= 1  # Intenta con un n√∫mero menor de colores.
            else:
                # Si hay conflictos, este `k` es demasiado bajo. El algoritmo termina.
                break

        # Procesa y guarda la mejor soluci√≥n encontrada.
        if mejor_solucion:
            colores, tiempo, k_real, iteraciones = mejor_solucion
            print(f"\n‚úÖ Soluci√≥n final sin conflictos usando k = {k_real}")
            guardar_solucion(idx, colores, 0, tiempo, k_real, iteraciones)

            # Agrega un paso final expl√≠cito a la animaci√≥n para mostrar el estado de la soluci√≥n final.
            pasos_totales.append((colores.copy(), 0, k_real, "Soluci√≥n final sin conflictos"))

            # Se llama a la funci√≥n de animaci√≥n con la lista completa de pasos.
            # `crear_animacion` recibe una lista de tuplas con 4 elementos.
            crear_animacion(G, pasos_totales, idx)
        else:
            print(f"\n‚ùå No se encontr√≥ soluci√≥n sin conflictos para el Caso {idx}")

# El bloque `if __name__ == "__main__":` asegura que el c√≥digo principal
# solo se ejecute cuando el script es el programa principal.
if __name__ == "__main__":
    main()